{
    'FanEcalDigiAlg': {
        '__component_type__': 'Algorithm',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', [], ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', [], ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', True, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 1, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'RootInTES': ('std::string', '', '''note: overridden by parent settings [FixTESPath<Algorithm>]'''),
            'ErrorsPrint': ('bool', True, '''print the statistics of errors/warnings/exceptions [GaudiCommon<Algorithm>]'''),
            'PropertiesPrint': ('bool', False, '''print the properties of the component [GaudiCommon<Algorithm>]'''),
            'PrintEmptyCounters': ('bool', False, '''force printing of empty counters, otherwise only printed in DEBUG mode [GaudiCommon<Algorithm>]'''),
            'TypePrint': ('bool', True, '''add the actual C++ component type into the messages [GaudiCommon<Algorithm>]'''),
            'Context': ('std::string', '', '''note: overridden by parent settings [GaudiCommon<Algorithm>]'''),
            'StatTableHeader': ('std::string', ' |    Counter                                      |     #     |    sum     | mean/eff^* | rms/err^*  |     min     |     max     |', '''the header row for the output Stat-table [GaudiCommon<Algorithm>]'''),
            'RegularRowFormat': ('std::string', ' | %|-48.48s|%|50t||%|10d| |%|11.7g| |%|#11.5g| |%|#11.5g| |%|#12.5g| |%|#12.5g| |', '''the format for regular row in the output Stat-table [GaudiCommon<Algorithm>]'''),
            'EfficiencyRowFormat': ('std::string', ' |*%|-48.48s|%|50t||%|10d| |%|11.5g| |(%|#9.6g| +- %|-#9.6g|)%%|   -------   |   -------   |', '''The format for "efficiency" row in the output Stat-table [GaudiCommon<Algorithm>]'''),
            'UseEfficiencyRowFormat': ('bool', True, '''use the special format for printout of efficiency counters [GaudiCommon<Algorithm>]'''),
            'CounterList': ('std::vector<std::string,std::allocator<std::string> >', [ '.*' ], '''RegEx list, of simple integer counters for CounterSummary [GaudiCommon<Algorithm>]'''),
            'StatEntityList': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''RegEx list, of StatEntity counters for CounterSummary [GaudiCommon<Algorithm>]'''),
            'VetoObjects': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''skip execute if one or more of these TES objects exist [GaudiAlgorithm]'''),
            'RequireObjects': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''execute only if one or more of these TES objects exist [GaudiAlgorithm]'''),
            'Scale': ('float', 1.00000, ''' [FanEcalDigiAlg]'''),
            'ReadOutName': ('std::string', 'EcalBarrelCollection', '''Readout name [FanEcalDigiAlg]'''),
            'ReadOutNameMC': ('std::string', 'MCParticleG4', '''Readout name [FanEcalDigiAlg]'''),
            'OutFileName': ('std::string', 'testout.root', '''Output file name [FanEcalDigiAlg]'''),
            'SkipEvt': ('int', 0, '''Skip event [FanEcalDigiAlg]'''),
            'Seed': ('float', 2131.00, '''Random Seed [FanEcalDigiAlg]'''),
            'Debug': ('int', 0, '''Debug level [FanEcalDigiAlg]'''),
            'EnergyThreshold': ('float', 0.00100000, '''Energy Threshold (/GeV) [FanEcalDigiAlg]'''),
            'CalibrECAL': ('float', 1.00000, '''Calibration coefficients for ECAL [FanEcalDigiAlg]'''),
            'CrystalBarLength': ('float', 262.000, '''Crystal Bar Length(mm) [FanEcalDigiAlg]'''),
            'AttenuationLength': ('float', 7000.00, '''Crystal Attenuation Length(mm) [FanEcalDigiAlg]'''),
            'TimeResolution': ('float', 0.100000, '''Crystal time resolution in one side (ns) [FanEcalDigiAlg]'''),
            'MatRefractive': ('float', 2.15000, '''Material refractive index of crystal [FanEcalDigiAlg]'''),
            'InitalTime': ('float', 2.00000, '''Start time (ns) [FanEcalDigiAlg]'''),
            'ChargeThresholdFrac': ('float', 0.0500000, '''Charge threshold fraction [FanEcalDigiAlg]'''),
            'SimCaloHitCollection': ('DataHandle<edm4hep::SimCalorimeterHitCollection>', DataHandle('SimCaloCol', 'R', 'DataWrapper<edm4hep::SimCalorimeterHitCollection>'), '''Handle of the Input SimCaloHit collection [unknown owner type]'''),
            'MCParticleCol': ('DataHandle<edm4hep::MCParticleCollection>', DataHandle('MCParticleG4', 'R', 'DataWrapper<edm4hep::MCParticleCollection>'), '''MCParticle collection (input) [unknown owner type]'''),
            'CaloHitCollection': ('DataHandle<edm4hep::CalorimeterHitCollection>', DataHandle('DigiCaloCol', 'W', 'DataWrapper<edm4hep::CalorimeterHitCollection>'), '''Handle of Digi CaloHit collection [unknown owner type]'''),
            'CaloAssociationCollection': ('DataHandle<edm4hep::MCRecoCaloAssociationCollection>', DataHandle('MCRecoCaloAssociationCollection', 'W', 'DataWrapper<edm4hep::MCRecoCaloAssociationCollection>'), '''Handle of CaloAssociation collection [unknown owner type]'''),
        },
    },
}
